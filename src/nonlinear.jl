# Truncated birth-death process models
# with computations using a classical pruning algorithm.
# The likelihood for DL, DLG and *WGD models can be computed using the CM algorithm
# but for more complicated models, we often need to truncate the state space
# and perform matrix exponentiation.
# This is because the CM algorithm relies on the underlying process being
# a proper branching process,
# i.e. where evolution of each particle is independent of the other particles.
# The `PhyloBDP` struct can be used directly for these purposes,
# we have the W field in the `ModelNode` object to store
# the transition probability matrices.
# So we could just dispatch on the `RatesModel` to know whether we need
# the truncated state space models or whether we can use the CM algorithm.
"""
    ConstantDLSC{T}

Constant rates duplication-loss model with different loss rates
when in single copy state.
"""
struct ConstantDLSC{T} <: Params{T}
    Œª ::T
    Œº ::T
    Œº‚ÇÅ::T
    Œ∑ ::T
    m ::Int   # truncation bound
    Q ::Matrix{T}

    function ConstantDLSC(Œª::T, Œº::T, Œº‚ÇÅ::T, Œ∑::T, m::Int) where T
        p = new{T}(Œª, Œº, Œº‚ÇÅ, Œ∑, m, Matrix{T}(undef, m+1, m+1))
        setratematrix!(p)
        return p
    end
end

ConstantDLSC(; Œª=0.1, Œº=0.1, Œº‚ÇÅ=0.01, Œ∑=0.66, m=10) =
    ConstantDLSC(promote(Œª, Œº, Œº‚ÇÅ, Œ∑)..., m)

Base.show(io::IO, m::ConstantDLSC) = write(io, "ConstantDLSC(\n Œª  = $(m.Œª),",
    "\n Œº  = $(m.Œº),\n Œº‚ÇÅ = $(m.Œº‚ÇÅ),\n Œ∑  = $(m.Œ∑),\n m  = $(m.m))")

getŒ∏(m::ConstantDLSC, node) = m
getQ(m::ConstantDLSC, node) = m.Q
trans(::ConstantDLSC) = (Œª=as‚Ñù‚Çä, Œº=as‚Ñù‚Çä, Œº‚ÇÅ=as‚Ñù‚Çä, Œ∑=asùïÄ)
(::ConstantDLSC)(Œ∏) = ConstantDLSC(; Œª=Œ∏.Œª, Œº=Œ∏.Œº, Œº‚ÇÅ=Œ∏.Œº‚ÇÅ, Œ∑=Œ∏.Œ∑)

function setratematrix!(p::ConstantDLSC)
    @unpack Œª, Œº, Œº‚ÇÅ, Œ∑, m = p
    Œºs = [Œº‚ÇÅ ; Œº .* collect(2:m)]
    Œªs = Œª .* collect(0:(m-1))
    ds = vcat(0., -Œªs[2:end] .- Œºs[1:end-1], -Œºs[end])
    p.Q .= Matrix(BandedMatrix(-1=>Œºs, 1=>Œªs, 0=>ds))
end

# non-linear models
function setW!(n::ModelNode{T}, rates) where T
    isroot(n) && return
    Q = getQ(rates.params, n)
    n.data.W .= exp(Q*distance(n))
end

# NOTE: for non-linear models the pgf formulation can't be used
# (because ‚Ñô{extinction} = F(0) is only valid for processes
# with the branching property)
# function setœµ!(n::ModelNode{T}, rates) where T
#     isleaf(n) && return  # XXX or should we set œµ to 0.? [it should always be]
#     setœµ!(n, 2, one(T))
#     for c in children(n)
#         ùëÉ = c.data.W
#         œµc = extp(Œ∏c.Œª, Œ∏c.Œº, distance(c), getœµ(c, 2))
#         setœµ!(c, 1, œµc)
#         setœµ!(n, 2, probify(getœµ(n, 2) * œµc))
#     end
#     # end
# end

function loglikelihood!(dag::CountDAG, model)
    for level in dag.levels  # parallelism possible within levels
        # Threads.@threads for n in level
        for n in level
            LightGraphs.outdegree(dag.graph, n) == 0 && continue
            prune!(dag, n, model)
        end
    end
    ‚Ñì = acclogpdf(dag, model) - dag.nfam*conditionfactor(model)
    isfinite(‚Ñì) ? ‚Ñì : -Inf
end

@inline function prune!(dag::CountDAG{T}, n, model) where T
    @unpack ndata, parts, graph = dag
    parts[n] .= zero(T)
    # loop over childnodes
    for c in outneighbors(graph, n)
        ùëÉ = model[ndata[c].snode].data.W
        parts[n] .+= log.(ùëÉ * exp.(parts[c]))
    end
end

# nonlinear models
function loglikelihood!(p::Profile, model, condition=true)
    @unpack Œ∑ = getŒ∏(model.rates, root(model))
    œµ = log(probify(getœµ(root(model), 2)))
    for n in model.order
        prune!(p, n, model)
    end
    ‚Ñì = ‚à´rootgeometric(p.‚Ñì[1], Œ∑, œµ)
    if condition
        ‚Ñì -= conditionfactor(model)
    end
    isfinite(‚Ñì) ? ‚Ñì : -Inf
end

@inline function prune!(p::Profile{T}, n, model) where T
    @unpack x, ‚Ñì = p
    if isleaf(n)
        ‚Ñì[id(n)][x[id(n)]+1] = 0.
        return
    end
    ‚Ñì[id(n)] .= zero(T)
    for c in children(n)
        ùëÉ = model[id(c)].data.W
        ‚Ñì[id(n)] .+= log.(ùëÉ * exp.(‚Ñì[id(c)]))
    end
end
